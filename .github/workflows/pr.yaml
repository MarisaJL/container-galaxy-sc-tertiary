name: Galaxy Tool Linting and Tests for push and PR
on: [pull_request]
env:
  GALAXY_REPO: https://github.com/galaxyproject/galaxy
  GALAXY_RELEASE: release_20.09
  MAX_CHUNKS: 4
jobs:
  # the setup job does two things:
  # 1. cache the pip cache and .planemo
  # 2. determine the list of changed repositories
  # it produces one artifact which contains
  # - a file with the latest SHA from the chosen branch of the Galaxy repo
  # - a file containing the list of changed repositories
  # which are needed in subsequent steps.
  setup:
    name: Setup cache and determine changed repositories
    runs-on: ubuntu-latest
    outputs:
      galaxy_head_sha: ${{ steps.get-galaxy-sha.outputs.galaxy_head_sha }}
      commit_range: ${{ steps.get-commit-range.outputs.commit_range }}
      nchunks: ${{ steps.get-chunks.outputs.nchunks }}
      chunk_list: ${{ steps.get-chunks.outputs.chunk_list }}
    strategy:
      matrix:
        python-version: [3.7]
    steps:
    - name: Print github context properties
      run: |
        echo 'event: ${{ github.event_name }}'
        echo 'sha: ${{ github.sha }}'
        echo 'ref: ${{ github.ref }}'
        echo 'head_ref: ${{ github.head_ref }}'
        echo 'base_ref: ${{ github.base_ref }}'
        echo 'event.before: ${{ github.event.before }}'
        echo 'event.after: ${{ github.event.after }}'
    - uses: actions/setup-python@v1
      with:
        python-version: ${{ matrix.python-version }}
    - name: Determine latest commit in the Galaxy repo
      id: get-galaxy-sha
      run: echo "::set-output name=galaxy_head_sha::$(git ls-remote ${{ env.GALAXY_REPO }} refs/heads/${{ env.GALAXY_RELEASE }} | cut -f1)"
    - name: Cache .cache/pip
      uses: actions/cache@v2
      id: cache-pip
      with:
        path: ~/.cache/pip
        key: pip_cache_py_${{ matrix.python-version }}_gxy_${{ steps.get-galaxy-sha.outputs.galaxy_head_sha }}
    - name: Cache .planemo
      uses: actions/cache@v2
      id: cache-planemo
      with:
        path: ~/.planemo
        key: planemo_cache_py_${{ matrix.python-version }}_gxy_${{ steps.get-galaxy-sha.outputs.galaxy_head_sha }}
    # Install the `wheel` package so that when installing other packages which
    # are not available as wheels, pip will build a wheel for them, which can be cached.
    - name: Install wheel
      run: pip install wheel
    - name: Install Planemo and flake8
      run: pip install planemo flake8 flake8-import-order
    - name: Fake a Planemo run to update cache
      if: steps.cache-pip.outputs.cache-hit != 'true' || steps.cache-planemo.outputs.cache-hit != 'true'
      run: |
        touch tool.xml
        PIP_QUIET=1 planemo test --galaxy_python_version ${{ matrix.python-version }} --no_conda_auto_init --galaxy_source $GALAXY_REPO --galaxy_branch $GALAXY_RELEASE
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0
    # The range of commits to check for changes is:
    # - `origin/develop...` for all events happening on a feature branch
    # - for events on the develop branch we compare against the sha before the event
    #   (note that this does not work for feature branch events since we want all
    #   commits on the feature branch and not just the commits of the last event)
    # - for pull requests we compare against the 1st ancestor, given the current
    #   HEAD is the merge between the PR branch and the base branch
    - name: Set commit range (push to the feature branch)
      if: github.ref != 'refs/heads/develop' && github.event_name == 'push'
      run: |
        git fetch origin develop
        echo "COMMIT_RANGE=origin/develop..." >> $GITHUB_ENV
    - name: Set commit range (push to the develop branch, e.g. merge)
      if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
      run: echo "COMMIT_RANGE=${{ github.event.before }}.." >> $GITHUB_ENV
    - name: Set commit range (pull request)
      if: github.event_name == 'pull_request'
      run: echo "COMMIT_RANGE=HEAD~.." >> $GITHUB_ENV
    - id: get-commit-range
      run: echo "::set-output name=commit_range::$COMMIT_RANGE"
    - name: Planemo ci_find_repos
      run: planemo ci_find_repos --changed_in_commit_range $COMMIT_RANGE --exclude packages --exclude deprecated --output changed_repositories.list
    - name: Show repo list
      run: cat changed_repositories.list
    - uses: actions/upload-artifact@v2
      with:
        name: Workflow artifacts
        path: changed_repositories.list
    - name: Planemo ci_find_tools for the changed repos
      run: |
        touch changed_tools.list
        if [ -s changed_repositories.list ]; then
            planemo ci_find_tools --output changed_tools.list $(cat changed_repositories.list)
        fi
    - name: Show tool list
      run: cat changed_tools.list
    - name: Compute chunks
      id: get-chunks
      run: |
        nchunks=$(wc -l < changed_tools.list)
        if [ "$nchunks" -gt "$MAX_CHUNKS" ]; then
            nchunks=$MAX_CHUNKS
        elif [ "$nchunks" -eq 0 ]; then
            nchunks=1
        fi
        echo "::set-output name=nchunks::$nchunks"
        echo "::set-output name=chunk_list::[$(seq -s ", " 0 $(($nchunks - 1)))]"
    - name: Show chunks
      run: |
        echo 'Using ${{ steps.get-chunks.outputs.nchunks }} chunks (${{ steps.get-chunks.outputs.chunk_list }})'

  # Planemo lint the changed repositories
  lint:
    name: Lint tools
    needs: setup
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: [3.7]
    steps:
    # checkout the repository
    # and use it as the current working directory
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0
    - uses: actions/setup-python@v1
      with:
        python-version: ${{ matrix.python-version }}
    - uses: actions/download-artifact@v2
      with:
        name: Workflow artifacts
        path: ../workflow_artifacts/
    - name: Cache .cache/pip
      uses: actions/cache@v2
      id: cache-pip
      with:
        path: ~/.cache/pip
        key: pip_cache_py_${{ matrix.python-version }}_gxy_${{ needs.setup.outputs.galaxy_head_sha }}
    - name: Install Planemo
      run: pip install planemo
    - name: Planemo lint
      run: |
        set -e
        while read -r DIR; do
            planemo shed_lint --tools --ensure_metadata --urls --report_level warn --fail_level error --recursive "$DIR";
        done < ../workflow_artifacts/changed_repositories.list
    - name: Planemo ci_find_tools for the commit range
      run: planemo ci_find_tools --changed_in_commit_range ${{ needs.setup.outputs.commit_range }} --exclude packages --exclude deprecated --output changed_tools.list
    - name: Check if each changed tool is in the list of changed repositories
      run: |
        set -e
        while read -r TOOL; do
            match_found=false;
            while read -r REPO; do
                case "$TOOL" in
                    "$REPO"*)
                        match_found=true
                        break
                        ;;
                esac
            done < ../workflow_artifacts/changed_repositories.list
            if [ "$match_found" != 'true' ]; then
                echo "Tool $TOOL not in changed repositories list: .shed.yml file missing" >&2
                exit 1
            fi
        done < changed_tools.list
